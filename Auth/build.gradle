plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id "org.springdoc.openapi-gradle-plugin" version "1.8.0"
    id 'groovy'
}

group = 'com.simocaccia.auth'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.5'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation 'org.apache.groovy:groovy'
    implementation platform('org.apache.groovy:groovy-bom')

    if (project.hasProperty("production")) {
        implementation 'org.mariadb.jdbc:mariadb-java-client:2.2.0'
    } else {
        runtimeOnly 'com.h2database:h2'
    }

    compileOnly 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation platform('org.spockframework:spock-bom:2.3-groovy-4.0')
    testImplementation 'org.spockframework:spock-core'
}

tasks.named('test') {
    useJUnitPlatform()
    include 'com/simocaccia/auth/services/**/*Spec.java'
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            '-Alombok.accessors.chain=true',
            '-Alombok.accessors.fluent=true'
    ]
}

// This section causes useful test output to go to the terminal.
test {
    systemProperty 'spring.config.location', 'classpath:application-local.yml'

    testLogging {
        events "passed", "skipped", "failed" //, "standardOut", "standardError"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces false

        // Change to `true` for more verbose test output
        showStandardStreams = false
    }
}